<?php

use Illuminate\Database\Migrations\Migration;

/**
 *
 *
 * @source Generated by FrenchFrogs\App\Console\CodeMigrationCommand
 * @since Nov 5, 2017
 * @author cotcotquedec@gmail.com
 */
class CreateMigratrionTvshowBgFbao extends Migration
{
    public function up()
    {


        $episodes = query('elfinder_path as p', [
            'p.path_id as path_id',
            'p.content',
            'reference_id',
            'e.seriesid',
            'EpisodeNumber',
            'SeasonNumber',
            's.IMDB_ID',
            'p.insert'
        ])
            ->join('elfinder_path_reference as r', 'p.path_id', 'r.path_id')
            ->join('thetvdb_episode as e', 'r.reference_id', 'e.id')
            ->join('thetvdb_serie as s', 's.id', 'e.seriesid')
            ->whereNotNull('s.IMDB_ID')
            ->where('reference_table', 'thetvdb_episode')
            ->where('reference_column', 'id')
//            ->limit(1)
            ->get();


        $episodes->each(function ($episode) {

            if (!\Storage::disk('files')->exists($episode->content)) {
                return;
            }

            $files = \Storage::disk('files')->files($episode->content, true);


            collect($files)->each(function ($file) use ($episode) {

                $media = new \App\Models\Media($file);

                if (!$media->isVideo()) {
                    return;
                }

                // On verifie que le fichier n'existe pas deja
                $validator = \Validator::make([$media->md5()], ['unique:medias,file_md5']);
                if ($validator->fails()) {
                    return;
                }


                try {


                    transaction(function () use ($media, $episode) {

                        $language = 'fr-FR';
                        $external_source = 'imdb_id';

                        // TVSHOW
                        $search = \Tmdb::getFindApi()->findBy($episode->IMDB_ID, compact('language', 'external_source'));

                        // PATCH YEAR ON SERIE NAME
                        if (empty($search['tv_results'])) {
                            return false;
                        }

                        $result = $search['tv_results'][0];


                        // ON essaie de recuperer les informations
                        try {
                            $data_episode = \Tmdb::getTvEpisodeApi()->getEpisode($result['id'], $episode->SeasonNumber, $episode->EpisodeNumber);
                        } catch (\Exception $e) {
                            return false;
                        }

                        // recherche
                        $data = [
                            'search' => $result,
                            'tvshow' => [
                                'data' => \Tmdb::getTvApi()->getTvshow($result['id']),
                                'ids' => \Tmdb::getTvApi()->getExternalIds($result['id']),
                            ],
                            'episode' => [
                                'data' => $data_episode,
                                'ids' => \Tmdb::getTvEpisodeApi()->getExternalIds($result['id'], $episode->SeasonNumber, $episode->EpisodeNumber),
                            ]
                        ];


                        // STOCKAGE
                        $db = $media->db();

                        // Synchro avec la base
                        $db->search_info = [$result['id'] => $data];
                        $db->type_rid = \Ref::MEDIA_TYPE_TVSHOW;
                        $db->status_rid = \Ref::MEDIA_STATUS_STORED;
                        $db->save();

                        \App\Models\Media::fromDb($db);

                        $db->update([
                            'data' => $db->search_info[$result['id']],
                            'stored_at' => $episode->insert,
                            'status_rid' => \Ref::MEDIA_STATUS_STORED
                        ]);

                        \DB::table('elfinder_path_reference')
                            ->where('path_id', $episode->path_id)
                            ->update([
                                'reference_column' => 'done'
                            ]);
                    });
                } catch (\Exception $e) {
                    d($e->getMessage());
                }
            });
        });

    }


    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
}
