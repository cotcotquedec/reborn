<?php namespace Models;


use Maknz\Slack\Client;
use Maknz\Slack\Message;

class Slack extends Client
{

    /**
     *
     *
     * @var Message
     */
    protected $message;


    /**
     * If it's a error message
     *
     * @var bool
     */
    protected $is_error = false;

    /**
     * Envoie un message
     *
     * @param \Maknz\Slack\Message $message
     * @return $this
     */
    public function sendMessage(Message $message)
    {

        // Ajout d'un emoji si dev
        if (app()->environment() != 'production') {
            $this->prependText( ':chicken: ');
        }

        if ($this->isError()) {
            $this->prependText(':exclamation:');
        }

        // envoie du message
        parent::sendMessage($message); // TODO: Change the autogenerated stub

        // suppression du message
        $this->disableError();
        $this->removeMessage();

        return $this;
    }

    /**
     * Send the current message
     *
     * @return \Models\Slack
     */
    public function send($channel = null)
    {
        if (!$this->hasMessage()) {
            throw new \LogicException('Pas de message de settÃ©');
        }

        // on set le channel
        if (!is_null($channel)) {
            $this->to($channel);
        }

        return $this->sendMessage($this->message);
    }


    /**
     * Return TRUE if a message is send
     *
     * @return bool
     */
    public function hasMessage()
    {
        return isset($this->message);
    }

    /**
     * Remove current message
     *
     * @return $this
     */
    public function removeMessage()
    {
        unset($this->message);
        return $this;
    }

    /**
     *  Set $message
     *
     * @param \Maknz\Slack\Message $message
     * @return $this
     */
    public function setMessage(Message $message)
    {
        $this->message = $message;
        return $this;
    }


    /**
     * Renvoie le message
     *
     * @return \Maknz\Slack\Message
     */
    public function getMessage()
    {
        if (!$this->hasMessage()) {
            $this->setMessage($this->createMessage());
        }

        return $this->message;
    }


    /**
     * Set le trext du message
     *
     * @param $text
     * @return $this
     */
    public function setText($text)
    {
        $this->getMessage()->setText($text);
        return $this;
    }

    /**
     * Append text to the message
     *
     * @param $text
     * @return $this
     */
    public function appendText($text)
    {
        $this->getMessage()->setText($this->getMessage()->getText() . $text);
        return $this;
    }


    /**
     * Preprend text to the message
     *
     * @param $text
     * @return $this
     */
    public function prependText($text)
    {
        $this->getMessage()->setText($text . $this->getMessage()->getText());
        return $this;
    }

    /**
     * Set le channel du message
     *
     * @param $channel
     * @return $this
     */
    public function to($channel)
    {
        $this->getMessage()->to($channel);
        return $this;
    }

    /**
     * Set un icon
     *
     * @param $emoji
     * @return $this
     */
    public function withIcon($emoji)
    {
        $this->getMessage()->withIcon($emoji);
        return $this;
    }


    /**
     * Set from message attribute
     *
     * @param $from
     * @return $this
     */
    public function from($from)
    {
        $this->getMessage()->from($from);
        return $this;

    }

    /**
     * Add an attachement
     *
     * @param $text
     * @param null $pretext
     * @param null $color
     * @param null $fields
     * @param null $fallback
     * @return $this
     */
    public function attach($text, $pretext = null, $color = null, $fields = null, $fallback = null)
    {
        $attachment = new \Maknz\Slack\Attachment([]);
        $attachment->setText($text);

        if (!is_null($pretext)) {
            $attachment->setPretext($pretext);
        }

        if (!is_null($color)) {
            $attachment->setColor($color);
        }

        if (!is_null($fields)) {
            $attachment->setFields($fields);
        }

        if (!is_null($fallback)) {
            $fallback = $text;
        }

        $attachment->setFallback($fallback);

        $this->getMessage()->setAttachments([$attachment]);

        return $this;
    }


    /**
     * Set is_error tyo TRUE
     *
     * @return $this
     */
    public function enableError()
    {
        $this->is_error = true;
        return $this;
    }

    /**
     *
     * Set is_error to false
     *
     * @return $this
     */
    public function disableError()
    {
        $this->is_error = false;
        return $this;
    }

    /**
     * Getter for $is_error
     *
     * @return bool
     */
    public function isError()
    {
        return $this->is_error;
    }
}